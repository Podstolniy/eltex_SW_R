#!/usr/bin/python
# -*- coding: utf-8 -*-

# import section postgre/sql
import psycopg2
import sql
from contextlib import closing
from psycopg2.extras import DictCursor

# import section for snmp
from pysnmp.hlapi import *
from ipaddress import *
from datetime import datetime

# var section
# snmp
community_string = 'public'  # From file WARNING!!!
ip_address_host = ['172.15.100.10',
                   '172.15.100.11',
                   '172.15.100.12',
                   '172.15.100.13',
                   #'172.15.100.14',
                   #'172.15.100.15',
                   #'172.15.100.16',
                   #'172.15.100.17',
                   #'172.15.100.18',
                   #'172.15.100.19',
                   ]  # From file
port_snmp = '161'
OID_sysName = ['1.3.6.1.2.1.1.5.0',
               '1.3.6.1.2.1.1.1.0',
               '1.3.6.1.4.1.89.1.8.0',
               #'1.3.6.1.2.1.2.2.1.8.',
               ]  # From SNMPv2-MIB hostname/sysname

# function section

#with open ('list_sw.txt', 'r') as re:
#    print ([a.rstrip() for a in re])

def snmp_getcmd(community, ip, port, OID):
    a =  getCmd(SnmpEngine(), CommunityData(community),
                UdpTransportTarget((ip, port)),
                ContextData(),
                ObjectType(ObjectIdentity(OID))
         )
    return a

#errors
def snmp_get_next(community, ip, port, OID):
    errorIndication, errorStatus, errorIndex,varBinds = next(snmp_getcmd(community, ip, port, OID))
    for name, val in varBinds:
        return (val.prettyPrint())
    #print([a for a in ip])
#interface_status_on(1)/off(2)
#def int_status (nameMIB):
#    mib = []
#    for k in range(24):
#        k = k + 49
#        mib.append(nameMIB+'{}'.format(k))
#    return mib
#print (int_status(OID_sysName))
#stint = int_status(OID_sysName[1])

#show_interface_status
#def sh_int_status (shint):
#    mib_sh = []
#    for i in range(len(shint)):
#        sysname = snmp_get_next(community_string, ip_address_host, port_snmp, shint[i])
#        i = i + 1
#        mib_sh.append(('int_Gi1/0/{} = ').format(i) + sysname)
#    return (mib_sh)
#b = sh_int_status(stint)

#show_name
def show_swname(swname):
    d = [] # @!!!!write decorator
    for k in ip_address_host:
        d.append(snmp_get_next(community_string, k, port_snmp, swname))
    return d
#a = show_swname(OID_sysName[0])
#show_snum
def show_swsnum(swsnum):
    d = []
    for k in ip_address_host:
        d.append(snmp_get_next(community_string, k, port_snmp, swsnum))
    return d
#b = show_swsnum(OID_sysName[1])
#show_cpu
def show_cpu(swcpu):
    d = []
    for k in ip_address_host:
        d.append(snmp_get_next(community_string, k, port_snmp, swcpu))
    return d
cpu = show_cpu(OID_sysName[2])
#print (cpu)
#connecting BD
with closing(psycopg2.connect(dbname = 'elt',
                              user = 'elt',
                              password = '123',
                              host = '127.0.0.1')) as conn:
    with conn.cursor() as cursor:
        conn.autocommit = True

        #sql.SQL('INSERT INTO cpu_eltex(id, cpu_eltex) VALUES (6, 2)')
        #                        'VALUES(%s,%s)',[a,b[0:95]]
        #               )
        #cursor.execute(insert)
#        for a1,b1,c1 in zip(a,b,ip_address_host):
#            cursor.execute('INSERT INTO eltstatistic_sw_name '
#                           '(name, name_model, ip_address) '
#                           'VALUES(%s,%s,%s)',[a1,b1,c1])
#        cursor.execute('SELECT *FROM eltstatistic_sw_name')
#        for row in cursor:
#            print (row)
#--WORK!
#        cursor.execute('INSERT INTO eltstatistic_sw_cpu '
#                       'SELECT id, cpu, ip_address FROM '
#                       '(SELECT id, name, ip_address FROM eltstatistic_sw_name) '
#                       'AS t(id, cpu, ip_address)'
                       #'WHERE ip_address<>ip_address'
#                       )
#--------
#--WORK!
        try:
            for c1, cp in zip(ip_address_host, cpu):
                cursor.execute('INSERT INTO eltstatistic_sw_cpu '
                               '(cpu, ip_address) '
                               'VALUES(%s,%s)', [cp,c1])
        except psycopg2.errors.UniqueViolation:
            locked = True
            print ("Unuque in column ip_address")
#----------
        for c1, cp in zip(ip_address_host, cpu):
            cursor.execute('UPDATE eltstatistic_sw_cpu '
                           'SET cpu = %s', [cp])

        cursor.execute('SELECT *FROM eltstatistic_sw_cpu')
        for row in cursor:
            print (row)
        #cursor.execute(insert)
